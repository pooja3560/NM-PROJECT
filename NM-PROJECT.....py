# -*- coding: utf-8 -*-
"""NM-PROJECT ....

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1iDr_ajSg_37ApvTdVkuWCxM69any9leS
"""

# STEP 1: Install Required Libraries (if not already available)
!pip install xgboost

# STEP 2: Import Libraries
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns

from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
from sklearn.linear_model import LinearRegression
from sklearn.ensemble import RandomForestRegressor
from xgboost import XGBRegressor
from sklearn.metrics import mean_squared_error, r2_score

# STEP 3: Upload Dataset
from google.colab import files
uploaded = files.upload()

# Load dataset (replace 'filename.csv' with your uploaded file)
df = pd.read_csv(next(iter(uploaded)))
df.head()

# STEP 4: Basic Preprocessing
df = df.dropna()  # Drop missing values (can be improved with imputation)
df = pd.get_dummies(df, drop_first=True)  # Encode categorical features

# STEP 5: Feature/Target Split
X = df.drop('SalePrice', axis=1)  # Use actual target column name
y = df['SalePrice']

# STEP 6: Train-Test Split
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# STEP 7: Feature Scaling
scaler = StandardScaler()
X_train_scaled = scaler.fit_transform(X_train)
X_test_scaled = scaler.transform(X_test)

# STEP 8: Model Training
models = {
    'Linear Regression': LinearRegression(),
    'Random Forest': RandomForestRegressor(n_estimators=100, random_state=42),
    'XGBoost': XGBRegressor(n_estimators=100, learning_rate=0.1, random_state=42)
}

# Train and Evaluate
for name, model in models.items():
    model.fit(X_train_scaled, y_train)
    y_pred = model.predict(X_test_scaled)
    rmse = np.sqrt(mean_squared_error(y_test, y_pred))
    r2 = r2_score(y_test, y_pred)
    print(f"\n{name}")
    print(f"RMSE: {rmse:.2f}")
    print(f"R² Score: {r2:.4f}")

# STEP 9: Feature Importance (for Random Forest)
importances = models['Random Forest'].feature_importances_
feat_importance = pd.DataFrame({'Feature': X.columns, 'Importance': importances})
feat_importance.sort_values(by='Importance', ascending=False).head(10).plot(kind='barh', x='Feature', y='Importance', title='Top 10 Features')
plt.show()
# STEP 1: Install Required Libraries (if not already available)
!pip install xgboost

# STEP 2: Import Libraries
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns

from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
from sklearn.linear_model import LinearRegression
from sklearn.ensemble import RandomForestRegressor
from xgboost import XGBRegressor
from sklearn.metrics import mean_squared_error, r2_score

# STEP 3: Upload Dataset
from google.colab import files
uploaded = files.upload()

# Load dataset (replace 'filename.csv' with your uploaded file)
df = pd.read_csv(next(iter(uploaded)))
df.head()

# STEP 4: Basic Preprocessing
df = df.dropna()  # Drop missing values (can be improved with imputation)
df = pd.get_dummies(df, drop_first=True)  # Encode categorical features

# STEP 5: Feature/Target Split
X = df.drop('SalePrice', axis=1)  # Use actual target column name
y = df['SalePrice']

# STEP 6: Train-Test Split
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# STEP 7: Feature Scaling
scaler = StandardScaler()
X_train_scaled = scaler.fit_transform(X_train)
X_test_scaled = scaler.transform(X_test)

# STEP 8: Model Training
models = {
    'Linear Regression': LinearRegression(),
    'Random Forest': RandomForestRegressor(n_estimators=100, random_state=42),
    'XGBoost': XGBRegressor(n_estimators=100, learning_rate=0.1, random_state=42)
}

# Train and Evaluate
for name, model in models.items():
    model.fit(X_train_scaled, y_train)
    y_pred = model.predict(X_test_scaled)
    rmse = np.sqrt(mean_squared_error(y_test, y_pred))
    r2 = r2_score(y_test, y_pred)
    print(f"\n{name}")
    print(f"RMSE: {rmse:.2f}")
    print(f"R² Score: {r2:.4f}")

# STEP 9: Feature Importance (for Random Forest)
importances = models['Random Forest'].feature_importances_
feat_importance = pd.DataFrame({'Feature': X.columns, 'Importance': importances})
feat_importance.sort_values(by='Importance', ascending=False).head(10).plot(kind='barh', x='Feature', y='Importance', title='Top 10 Features')
plt.show()